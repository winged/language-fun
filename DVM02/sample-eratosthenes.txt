# This is an implementation of the sieve of Eratosthenes algorithm for DVM02.

# It works roughly like this: Since the VM provides a virtually arbitrary sized
# memory, and the VM initializes every memory word with a value of zero, we use
# an inverted boolean logic to mark cells non-prime.

# For simplicity, we loop twice: First, a marker run that marks all multiples of
# a number as prime, and second, an output run, which prints all primes to the output.

pc:            START # 0: contains program counter
max_number:    NOP   # 1: Largest number to check
step_size:     NOP   # 2: Current step size
current_cell:  NOP   # 3: Pointer to currently evaluated cell
temp_helper:   NOP   # 4: Conditional accumulator for loop termination
print_counter: NOP   # 5: Counter for printing

# Initialisation

SET max_number 300 # Biggest number to check for. Well, approximately, as we're not
                   # very careful about when to stop (allows us some simplifications)


SET step_size    2           # Step size, begins with 2
SET current_cell data_start  # Pointer to currently evaluated cell.

outer_marker_loop:

	SET current_cell data_start   # Start out at position zero
	ADD current_cell @step_size   # Add current-step-size to our pointer.

	inner_marker_loop:
		ADD current_cell  @step_size
		SET @current_cell  1         # Mark position as non-prime

		# Figure out if we need to re-run inner loop:
		# If pointer is bigger than position of largest number
		# to check, we abort the loop.

		SET temp_helper  data_start     # beginning-of-data
		ADD temp_helper  @max_number    # add number range
		JGT inner_marker_loop @temp_helper @current_cell

	ADD step_size  1

	# Figure out if we need to re-run inner loop:
	# If step-size is bigger than half of the number range,
	# we abort the outer loop.

	SET temp_helper  @step_size     # temp_helper is now step-size
	MUL temp_helper   2     # temp_helper is now step-size * 2

	JGT outer_marker_loop  @max_number @temp_helper


# Re-init pointer-to-current-cell for printing
SET current_cell  data_start

print_loop:

	ADD  print_counter 1
	ADD  current_cell  1 # Evaluate next cell

	JGT end_program @print_counter @max_number  # End program if print_counter > max_number

	COPY temp_helper @current_cell  # De-reference pointer-to-current-cell, to check it's content
	JNZ  print_loop  @temp_helper   # Restart loop if current-cell is nonzero (it had been marked)
	                                # Note that this only works because uninitialized memory is always zero

	WRITEI @print_counter   # Output current number - it's prime.
	WRITEC 10               # Newline

	JNZ print_loop 1  # Continue printing...

end_program:
END

# Dummy to tell the program where it can start messing with memory
data_start:
