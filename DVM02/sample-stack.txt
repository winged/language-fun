
# Registers and Initialisators

pc:              START #0   - program counter, as usual


stack_operand:   NOP   #1   - placeholder for push/pop value
stack_return:    NOP   #2   - pointer to return address
stack_pointer:   NOP   #3   - stack position pointer

stack_bottom:    NOP   #s   - Stack bottom ( 0)
                 NOP   #s   - Stack        ( 1)
                 NOP   #s   - Stack        ( 2)
                 NOP   #s   - Stack        ( 3)
                 NOP   #s   - Stack        ( 4)
                 NOP   #s   - Stack        ( 5)
                 NOP   #s   - Stack        ( 6)
                 NOP   #s   - Stack        ( 7)
                 NOP   #s   - Stack        ( 8)
                 NOP   #s   - Stack        ( 9)
                 NOP   #s   - Stack        (10)


# Initialize stack data
SET stack_pointer stack_bottom

# Go to start of program
JNZ start_program   1

push:
   SET @stack_pointer @stack_operand # Store value to top of stack
   ADD  stack_pointer  1

   WRITEC 43    # Write "+", for logging PUSH
   WRITEI @stack_operand    # Log PUSH value
   WRITEC 10    # Newline after logging

   # Prepare for returning. UNHOLY MAGIC! Increase return address by
   # 3 registers to compensate for the JNZ at the call site
   ADD  stack_return  3
   JNZ @stack_return  1


pop:
   SUB   stack_pointer  1
   COPY  stack_operand @stack_pointer # Fetch stack top into register 1
   SET  @stack_pointer  0             # Clear stack content - just for debugging purposes

   WRITEC 45    # Write "-", for logging POP
   WRITEI @stack_operand    # Log POP value
   WRITEC 10    # Newline after logging

   # Prepare for returning. UNHOLY MAGIC! Increase return address by
   # 3 registers to compensate for the JNZ at the call site
   ADD  stack_return  3
   JNZ @stack_return  1


start_program:
    # Okay, here's a sample program. We push the values 1-5, then dump the register space,
    # then exit.
    SET  stack_operand   1  # first value
    SET  stack_return   @pc # Return address
    JNZ  push            1  # Call PUSH

    SET  stack_operand   2  # second value
    SET  stack_return   @pc # Return address
    JNZ  push            1  # Call PUSH

    SET  stack_operand   3  # third value
    SET  stack_return   @pc # Return address
    JNZ  push            1  # Call PUSH

    SET  stack_operand   4  # fourth value
    SET  stack_return   @pc # Return address
    JNZ  push            1  # Call PUSH

    SET  stack_operand   5  # fifth value
    SET  stack_return   @pc # Return address
    JNZ  push            1  # Call PUSH

    # Print the top value from stack
    SET stack_return  @0             # Return address
    JNZ pop            1             # Call POP
    WRITEI            @stack_operand # recently pop'ed value
    WRITEC             10            # newline


    # Debug - dump stack vars
    WRITEC 10     # newline
    WRITEC 10     # newline
    DUMP    1 3   # Stack data

    # Debug 2 - dump stack content
    WRITEC 10     # newline
    WRITEC 10     # Newline
    DUMP    4 14  # Stack content

    # End program
    END
